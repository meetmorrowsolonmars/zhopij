// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/v1/debug/debug.proto

package debug

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DebugService_ProduceCreateAnswerEvent_FullMethodName = "/zhopij.answer.v1.debug.DebugService/ProduceCreateAnswerEvent"
)

// DebugServiceClient is the client API for DebugService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugServiceClient interface {
	ProduceCreateAnswerEvent(ctx context.Context, in *ProduceCreateAnswerEventRequest, opts ...grpc.CallOption) (*ProduceCreateAnswerEventResponse, error)
}

type debugServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugServiceClient(cc grpc.ClientConnInterface) DebugServiceClient {
	return &debugServiceClient{cc}
}

func (c *debugServiceClient) ProduceCreateAnswerEvent(ctx context.Context, in *ProduceCreateAnswerEventRequest, opts ...grpc.CallOption) (*ProduceCreateAnswerEventResponse, error) {
	out := new(ProduceCreateAnswerEventResponse)
	err := c.cc.Invoke(ctx, DebugService_ProduceCreateAnswerEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugServiceServer is the server API for DebugService service.
// All implementations must embed UnimplementedDebugServiceServer
// for forward compatibility
type DebugServiceServer interface {
	ProduceCreateAnswerEvent(context.Context, *ProduceCreateAnswerEventRequest) (*ProduceCreateAnswerEventResponse, error)
	mustEmbedUnimplementedDebugServiceServer()
}

// UnimplementedDebugServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDebugServiceServer struct {
}

func (UnimplementedDebugServiceServer) ProduceCreateAnswerEvent(context.Context, *ProduceCreateAnswerEventRequest) (*ProduceCreateAnswerEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceCreateAnswerEvent not implemented")
}
func (UnimplementedDebugServiceServer) mustEmbedUnimplementedDebugServiceServer() {}

// UnsafeDebugServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugServiceServer will
// result in compilation errors.
type UnsafeDebugServiceServer interface {
	mustEmbedUnimplementedDebugServiceServer()
}

func RegisterDebugServiceServer(s grpc.ServiceRegistrar, srv DebugServiceServer) {
	s.RegisterService(&DebugService_ServiceDesc, srv)
}

func _DebugService_ProduceCreateAnswerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceCreateAnswerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugServiceServer).ProduceCreateAnswerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugService_ProduceCreateAnswerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugServiceServer).ProduceCreateAnswerEvent(ctx, req.(*ProduceCreateAnswerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugService_ServiceDesc is the grpc.ServiceDesc for DebugService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zhopij.answer.v1.debug.DebugService",
	HandlerType: (*DebugServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProduceCreateAnswerEvent",
			Handler:    _DebugService_ProduceCreateAnswerEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/debug/debug.proto",
}
